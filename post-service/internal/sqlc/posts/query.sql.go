// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package posts_sql

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (owner_id,body,media_id) VALUES ($1,$2,$3)
`

type CreatePostParams struct {
	OwnerID int32          `json:"ownerId"`
	Body    string         `json:"body"`
	MediaID sql.NullString `json:"mediaId"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost, arg.OwnerID, arg.Body, arg.MediaID)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, owner_id, body, media_id FROM posts
`

func (q *Queries) GetAll(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Body,
			&i.MediaID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByUsername = `-- name: GetPostByUsername :one
SELECT id, owner_id, body, media_id FROM posts WHERE id = $1
`

func (q *Queries) GetPostByUsername(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByUsername, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Body,
		&i.MediaID,
	)
	return i, err
}
